package main

import (
	"context"
	"flag"
	"fmt"
	"log"
	"math/rand"
	"strconv"

	"github.com/go-redis/redis/v9"
)

var client *redis.Client

func init() {
	client = redis.NewClient(&redis.Options{Addr: "localhost:6379"})
	_, err := client.Ping(context.Background()).Result()

	if err != nil {
		log.Fatal("ping failed. could not connect to cluster", err)
	}

}

func main() {
	ctx := context.Background()

	//seed data
	for i := 1; i <= 20; i++ {
		client.Set(ctx, "scan-test-"+strconv.Itoa(i), "test-value", 0)
	}
	fmt.Println("added seed data for scan test")

	var cursor uint64
	var keys []string

	for {
		keys, cursor = client.Scan(ctx, cursor, "scan-test-*1", 0).Val()

		for _, key := range keys {
			fmt.Println("found key", key)
		}

		if cursor == 0 {
			fmt.Println("end of scan")
			break
		}
	}

	iter := client.Scan(ctx, 0, "scan-test-*2", 0).Iterator()
	for iter.Next(ctx) {
		fmt.Println("found key using scan iterator", iter.Val())
	}

	err := client.LPush(ctx, "scan-test-list", 42).Err()
	if err == nil {
		fmt.Println("created list scan-test-list")
	}

	iter1 := client.ScanType(ctx, 0, "scan-test*", 0, "list").Iterator()
	for iter1.Next(ctx) {
		fmt.Println("found key using scan iterator", iter.Val())
	}
}