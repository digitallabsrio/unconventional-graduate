
func search(rw http.ResponseWriter, req *http.Request) {

	searchParams, err := url.ParseQuery(req.URL.RawQuery)
	if err != nil {
		fmt.Println("invalid search criteria")
		http.Error(rw, err.Error(), http.StatusBadRequest)
		return
	}

	searchQuery := searchParams.Get(queryParamQuery)

	query := redisearch.NewQuery(searchQuery)

	fields := searchParams.Get(queryParamFields)
	if fields != "" {
		fmt.Println("fields to be returned", fields)
		toBeReturned := strings.Split(fields, ",")
		query = query.SetReturnFields(toBeReturned...)
	}

	offsetAndLimit := searchParams.Get(queryParamOffsetLimit)
	if offsetAndLimit != "" {
		fmt.Println("offset_limit", offsetAndLimit)
		offsetAndLimitVals := strings.Split(offsetAndLimit, ",")

		offset, err := strconv.Atoi(offsetAndLimitVals[0])
		if err != nil {
			http.Error(rw, "invalid offset", http.StatusBadRequest)
		}
		limit, err := strconv.Atoi(offsetAndLimitVals[1])
		if err != nil {
			http.Error(rw, "invalid limit", http.StatusBadRequest)
		}
		query = query.Limit(offset, limit)
	}

	docs, total, err := client.Search(query)

	if err != nil {
		status := http.StatusInternalServerError

		if strings.Contains(err.Error(), "Syntax error") {
			status = http.StatusBadRequest
		}
		fmt.Println("search failed")
		http.Error(rw, err.Error(), status)
		return
	}

	fmt.Printf("found %v docs matching query %s\n", total, searchQuery)
	fmt.Printf("showing %v docs in results as per offset and limit %v\n", len(docs), query.Paging)

	response := []map[string]interface{}{}
	for _, doc := range docs {
		fmt.Println("doc id", doc.Id)
		response = append(response, doc.Properties)
	}

	rw.Header().Add(responseHeaderSearchHits, strconv.Itoa(total))
	rw.Header().Add(responseHeaderPageSize, strconv.Itoa(len(docs)))

	err = json.NewEncoder(rw).Encode(response)
	if err != nil {
		fmt.Println("failed to encode response")
		http.Error(rw, err.Error(), http.StatusInternalServerError)
		return
	}
}