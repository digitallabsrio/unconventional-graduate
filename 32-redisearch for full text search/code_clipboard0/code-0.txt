package main

import (
	"fmt"

	"github.com/RediSearch/redisearch-go/redisearch"
	"github.com/gomodule/redigo/redis"
)

var pool *redis.Pool
var client *redisearch.Client

func init() {
	pool = &redis.Pool{Dial: func() (redis.Conn, error) {
		return redis.Dial("tcp", "localhost:6379")
	}}

	client = redisearch.NewClientFromPool(pool, "test-index")
}

func main() {

	schema := redisearch.NewSchema(redisearch.DefaultOptions).
		AddField(redisearch.NewTextFieldOptions("name", redisearch.TextFieldOptions{}))

	indexDefinition := redisearch.NewIndexDefinition().AddPrefix("test:")

	client.CreateIndexWithIndexDefinition(schema, indexDefinition)

	fmt.Println("redisearch index created")

	conn := pool.Get()

	val := redis.Args{"test:1"}.AddFlat(map[string]string{"name": "one"})
	conn.Do("HSET", val...)

	fmt.Println("created hash - test:1")

	val = redis.Args{"test:2"}.AddFlat(map[string]string{"name": "two"})
	conn.Do("HSET", val...)

	fmt.Println("created hash - test:2")

	docs, total, _ := client.Search(redisearch.NewQuery("*"))

	fmt.Println("found", total, "documents")
	for _, doc := range docs {
		fmt.Println("document ID -", doc.Id)
		fmt.Println("document attributes -", doc.Properties)
	}

	err := client.DeleteDocument("test:1")
	if err != nil {
		fmt.Println("failed to delete document (hash) test:1", err)
	}
	fmt.Println("deleted document (hash) test:1")

	err = client.DropIndex(false)
	if err != nil {
		fmt.Println("failed to drop index", err)
	}
	fmt.Println("dropped index")
}